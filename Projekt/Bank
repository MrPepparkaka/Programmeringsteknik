import java.util.ArrayList;

public class Bank {
	ArrayList<BankAccount> accounts;
	ArrayList<Customer> customerList = new ArrayList<Customer>();
	ArrayList<BankAccount> accountSpec = new ArrayList<BankAccount>();

	/** Skapar en ny bank utan konton. */
	public Bank() {
		accounts = new ArrayList<BankAccount>();

	}

	/**
	 * Öppna ett nytt konto i banken. Om det redan finns en kontoinnehavare med de
	 * givna uppgifterna ska inte en ny Customer skapas, utan istället den
	 * befintliga användas. Det nya kontonumret returneras.
	 */
	public int addAccount(String holderName, long idNr) {

		boolean exist = customerExist(idNr);
		BankAccount b;

		if (exist == true) {
			b = new BankAccount(findHolder(idNr)); // innan (p)
			accounts.add(b);
			return b.getAccountNumber();

		} else if (exist == false) {
			Customer customer = new Customer(holderName, idNr);
			b = new BankAccount(customer);
			accounts.add(b);
			return b.getAccountNumber();
		}
		return 0;
	}

	public boolean customerExist(long idNr) {
		for (BankAccount account : accounts) {
			if (idNr == account.getHolder().getIdNr()) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Returnerar den kontoinnehavaren som har det givna id-numret, eller null om
	 * ingen sådan finns.
	 */
	public Customer findHolder(long idNr) {

		for (BankAccount account : accounts) {
			if (idNr == account.getHolder().getIdNr()) {
				Customer holder = account.getHolder();
				return holder;
			}

		}
		return null;

	}

	/**
	 * Tar bort konto med nummer ’number’ från banken. Returnerar true om kontot
	 * fanns (och kunde tas bort), annars false.
	 */
	public boolean removeAccount(int number) {
		for (int i = 0; i < accounts.size(); i++) {
			if (accounts.get(i).getAccountNumber() == number) {
				accounts.remove(i);
				return true;
			}

		}

		return false;

	}

	/**
	 * Returnerar en lista innehållande samtliga bankkonton i banken. Listan är
	 * sorterad på kontoinnehavarnas namn.
	 */
	public ArrayList<BankAccount> getAllAccounts() {
		if (accounts.size() == 0) {
			return null;
		}
		return sortAccounts(accounts);
	}

	/**
	 * Söker upp och returnerar bankkontot med kontonummer ’accountNumber’.
	 * Returnerar null om inget sådant konto finns.
	 */
	public ArrayList<BankAccount> findByNumber(int accountNumber) {
		ArrayList<BankAccount> accountNr = new ArrayList<BankAccount>();

		for (BankAccount account : accounts) {
			if (accountNumber == (account.getAccountNumber())) {
				accountNr.add(account);
				return accountNr;
			}

		}
		if (accountNr.size() == 0) {
			return accountNr;
		}
		return null;
	}

	/**
	 * Söker upp alla bankkonton som innehas av kunden med id-nummer ’idNr’. Kontona
	 * returneras i en lista. Kunderna antas ha unika id-nummer.
	 */
	public ArrayList<BankAccount> findAccountsForHolder(long idNr) {// Letar upp alla konton som tillhör ett visst
																	// personnummer
		ArrayList<BankAccount> foundAccounts = new ArrayList<BankAccount>();

		for (BankAccount account : accounts) {
			if (account.getHolder().getIdNr() == (idNr)) {
				foundAccounts.add(account);
			}
		}

		return foundAccounts;
	}

	/**
	 * Söker upp kunder utifrån en sökning på namn eller del av namn. Alla personer
	 * vars namn innehåller strängen ’namePart’ inkluderas i resultatet, som
	 * returneras som en lista. Samma person kan förekomma flera gånger i
	 * resultatet. Sökningen är "case insensitive", det vill säga gör ingen skillnad
	 * på stora och små bokstäver.
	 */
	public ArrayList<Customer> findByPartofName(String namePart) {
		ArrayList<Customer> names = new ArrayList<Customer>();

		if (namePart == null) {
			return null;
		}

		for (BankAccount accountName : accounts) {
			if (accountName.getHolder().getName().toLowerCase().contains(namePart.toLowerCase())) {
				Customer n = (accountName.getHolder());
				names.add(n);

			}

		}
		return names;

	}

	private ArrayList<BankAccount> sortAccounts(ArrayList<BankAccount> acc) {
		ArrayList<BankAccount> unsorted = new ArrayList<BankAccount>();
		ArrayList<BankAccount> sorted = new ArrayList<BankAccount>();
		ArrayList<BankAccount> higher = new ArrayList<BankAccount>();
		ArrayList<BankAccount> lower = new ArrayList<BankAccount>();

		unsorted.addAll(acc);

		BankAccount reference = unsorted.get(unsorted.size() / 2);
		unsorted.remove(unsorted.size() / 2);

		for (BankAccount account : unsorted) {

			if (reference.getHolder().getName().toLowerCase()
					.compareTo(account.getHolder().getName().toLowerCase()) > 0) {
				lower.add(account);
			} else {
				higher.add(account);
			}

		}
		if (lower.size() > 1) {
			sorted.addAll(sortAccounts(lower));
		} else {
			sorted.addAll(lower);
		}

		sorted.add(reference);

		if (higher.size() > 1) {
			sorted.addAll(sortAccounts(higher));
		} else {
			sorted.addAll(higher);
		}
		return sorted;

	}

}
